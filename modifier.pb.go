// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modifier.proto

package dice

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CompareOp_CompareType int32

const (
	UNDEFINED CompareOp_CompareType = 0
	EQL       CompareOp_CompareType = 1
	LSS       CompareOp_CompareType = 2
	GTR       CompareOp_CompareType = 3
	LEQ       CompareOp_CompareType = 4
	GEQ       CompareOp_CompareType = 5
)

var CompareOp_CompareType_name = map[int32]string{
	0: "UNDEFINED",
	1: "EQL",
	2: "LSS",
	3: "GTR",
	4: "LEQ",
	5: "GEQ",
}

var CompareOp_CompareType_value = map[string]int32{
	"UNDEFINED": 0,
	"EQL":       1,
	"LSS":       2,
	"GTR":       3,
	"LEQ":       4,
	"GEQ":       5,
}

func (x CompareOp_CompareType) String() string {
	return proto.EnumName(CompareOp_CompareType_name, int32(x))
}

func (CompareOp_CompareType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{0, 0}
}

type Modifier_ModifierType int32

const (
	UNDEFINED        Modifier_ModifierType = 0
	REROLL           Modifier_ModifierType = 1
	DROP_KEEP        Modifier_ModifierType = 2
	CRITICAL_FAILURE Modifier_ModifierType = 3
	CRITICAL_SUCCESS Modifier_ModifierType = 4
)

var Modifier_ModifierType_name = map[int32]string{
	0: "UNDEFINED",
	1: "REROLL",
	2: "DROP_KEEP",
	3: "CRITICAL_FAILURE",
	4: "CRITICAL_SUCCESS",
}

var Modifier_ModifierType_value = map[string]int32{
	"UNDEFINED":        0,
	"REROLL":           1,
	"DROP_KEEP":        2,
	"CRITICAL_FAILURE": 3,
	"CRITICAL_SUCCESS": 4,
}

func (x Modifier_ModifierType) String() string {
	return proto.EnumName(Modifier_ModifierType_name, int32(x))
}

func (Modifier_ModifierType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{1, 0}
}

type DropKeepModifier_DropKeepMethod int32

const (
	UNDEFINED    DropKeepModifier_DropKeepMethod = 0
	DROP         DropKeepModifier_DropKeepMethod = 1
	DROP_LOWEST  DropKeepModifier_DropKeepMethod = 2
	DROP_HIGHEST DropKeepModifier_DropKeepMethod = 3
	KEEP         DropKeepModifier_DropKeepMethod = 4
	KEEP_LOWEST  DropKeepModifier_DropKeepMethod = 5
	KEEP_HIGHEST DropKeepModifier_DropKeepMethod = 6
)

var DropKeepModifier_DropKeepMethod_name = map[int32]string{
	0: "UNDEFINED",
	1: "DROP",
	2: "DROP_LOWEST",
	3: "DROP_HIGHEST",
	4: "KEEP",
	5: "KEEP_LOWEST",
	6: "KEEP_HIGHEST",
}

var DropKeepModifier_DropKeepMethod_value = map[string]int32{
	"UNDEFINED":    0,
	"DROP":         1,
	"DROP_LOWEST":  2,
	"DROP_HIGHEST": 3,
	"KEEP":         4,
	"KEEP_LOWEST":  5,
	"KEEP_HIGHEST": 6,
}

func (x DropKeepModifier_DropKeepMethod) String() string {
	return proto.EnumName(DropKeepModifier_DropKeepMethod_name, int32(x))
}

func (DropKeepModifier_DropKeepMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{2, 0}
}

type CompareOp struct {
	Type                 CompareOp_CompareType `protobuf:"varint,1,opt,name=type,proto3,enum=dice.CompareOp_CompareType" json:"type,omitempty"`
	Target               int64                 `protobuf:"zigzag64,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CompareOp) Reset()         { *m = CompareOp{} }
func (m *CompareOp) String() string { return proto.CompactTextString(m) }
func (*CompareOp) ProtoMessage()    {}
func (*CompareOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{0}
}
func (m *CompareOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareOp.Merge(m, src)
}
func (m *CompareOp) XXX_Size() int {
	return m.Size()
}
func (m *CompareOp) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareOp.DiscardUnknown(m)
}

var xxx_messageInfo_CompareOp proto.InternalMessageInfo

type Modifier struct {
	// Types that are valid to be assigned to ModifierDifferentiatingFields:
	//	*Modifier_DropKeep
	//	*Modifier_CriticalSuccess
	//	*Modifier_CriticalFailure
	//	*Modifier_Reroll
	ModifierDifferentiatingFields isModifier_ModifierDifferentiatingFields `protobuf_oneof:"modifier_differentiating_fields"`
	XXX_NoUnkeyedLiteral          struct{}                                 `json:"-"`
	XXX_unrecognized              []byte                                   `json:"-"`
	XXX_sizecache                 int32                                    `json:"-"`
}

func (m *Modifier) Reset()         { *m = Modifier{} }
func (m *Modifier) String() string { return proto.CompactTextString(m) }
func (*Modifier) ProtoMessage()    {}
func (*Modifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{1}
}
func (m *Modifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Modifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Modifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Modifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Modifier.Merge(m, src)
}
func (m *Modifier) XXX_Size() int {
	return m.Size()
}
func (m *Modifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Modifier.DiscardUnknown(m)
}

var xxx_messageInfo_Modifier proto.InternalMessageInfo

type isModifier_ModifierDifferentiatingFields interface {
	isModifier_ModifierDifferentiatingFields()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Modifier_DropKeep struct {
	DropKeep *DropKeepModifier `protobuf:"bytes,2,opt,name=drop_keep,json=dropKeep,proto3,oneof" json:"drop_keep,omitempty"`
}
type Modifier_CriticalSuccess struct {
	CriticalSuccess *CriticalSuccessModifier `protobuf:"bytes,3,opt,name=critical_success,json=criticalSuccess,proto3,oneof" json:"critical_success,omitempty"`
}
type Modifier_CriticalFailure struct {
	CriticalFailure *CriticalFailureModifier `protobuf:"bytes,4,opt,name=critical_failure,json=criticalFailure,proto3,oneof" json:"critical_failure,omitempty"`
}
type Modifier_Reroll struct {
	Reroll *RerollModifier `protobuf:"bytes,5,opt,name=reroll,proto3,oneof" json:"reroll,omitempty"`
}

func (*Modifier_DropKeep) isModifier_ModifierDifferentiatingFields()        {}
func (*Modifier_CriticalSuccess) isModifier_ModifierDifferentiatingFields() {}
func (*Modifier_CriticalFailure) isModifier_ModifierDifferentiatingFields() {}
func (*Modifier_Reroll) isModifier_ModifierDifferentiatingFields()          {}

func (m *Modifier) GetModifierDifferentiatingFields() isModifier_ModifierDifferentiatingFields {
	if m != nil {
		return m.ModifierDifferentiatingFields
	}
	return nil
}

func (m *Modifier) GetDropKeep() *DropKeepModifier {
	if x, ok := m.GetModifierDifferentiatingFields().(*Modifier_DropKeep); ok {
		return x.DropKeep
	}
	return nil
}

func (m *Modifier) GetCriticalSuccess() *CriticalSuccessModifier {
	if x, ok := m.GetModifierDifferentiatingFields().(*Modifier_CriticalSuccess); ok {
		return x.CriticalSuccess
	}
	return nil
}

func (m *Modifier) GetCriticalFailure() *CriticalFailureModifier {
	if x, ok := m.GetModifierDifferentiatingFields().(*Modifier_CriticalFailure); ok {
		return x.CriticalFailure
	}
	return nil
}

func (m *Modifier) GetReroll() *RerollModifier {
	if x, ok := m.GetModifierDifferentiatingFields().(*Modifier_Reroll); ok {
		return x.Reroll
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Modifier) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Modifier_DropKeep)(nil),
		(*Modifier_CriticalSuccess)(nil),
		(*Modifier_CriticalFailure)(nil),
		(*Modifier_Reroll)(nil),
	}
}

type DropKeepModifier struct {
	Method               DropKeepModifier_DropKeepMethod `protobuf:"varint,1,opt,name=method,proto3,enum=dice.DropKeepModifier_DropKeepMethod" json:"method,omitempty"`
	Count                int32                           `protobuf:"zigzag32,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DropKeepModifier) Reset()         { *m = DropKeepModifier{} }
func (m *DropKeepModifier) String() string { return proto.CompactTextString(m) }
func (*DropKeepModifier) ProtoMessage()    {}
func (*DropKeepModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{2}
}
func (m *DropKeepModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropKeepModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropKeepModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DropKeepModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropKeepModifier.Merge(m, src)
}
func (m *DropKeepModifier) XXX_Size() int {
	return m.Size()
}
func (m *DropKeepModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DropKeepModifier.DiscardUnknown(m)
}

var xxx_messageInfo_DropKeepModifier proto.InternalMessageInfo

type CriticalSuccessModifier struct {
	Compare              *CompareOp `protobuf:"bytes,1,opt,name=compare,proto3" json:"compare,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CriticalSuccessModifier) Reset()         { *m = CriticalSuccessModifier{} }
func (m *CriticalSuccessModifier) String() string { return proto.CompactTextString(m) }
func (*CriticalSuccessModifier) ProtoMessage()    {}
func (*CriticalSuccessModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{3}
}
func (m *CriticalSuccessModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CriticalSuccessModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CriticalSuccessModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CriticalSuccessModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CriticalSuccessModifier.Merge(m, src)
}
func (m *CriticalSuccessModifier) XXX_Size() int {
	return m.Size()
}
func (m *CriticalSuccessModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_CriticalSuccessModifier.DiscardUnknown(m)
}

var xxx_messageInfo_CriticalSuccessModifier proto.InternalMessageInfo

type CriticalFailureModifier struct {
	Compare              *CompareOp `protobuf:"bytes,1,opt,name=compare,proto3" json:"compare,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CriticalFailureModifier) Reset()         { *m = CriticalFailureModifier{} }
func (m *CriticalFailureModifier) String() string { return proto.CompactTextString(m) }
func (*CriticalFailureModifier) ProtoMessage()    {}
func (*CriticalFailureModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{4}
}
func (m *CriticalFailureModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CriticalFailureModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CriticalFailureModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CriticalFailureModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CriticalFailureModifier.Merge(m, src)
}
func (m *CriticalFailureModifier) XXX_Size() int {
	return m.Size()
}
func (m *CriticalFailureModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_CriticalFailureModifier.DiscardUnknown(m)
}

var xxx_messageInfo_CriticalFailureModifier proto.InternalMessageInfo

type RerollModifier struct {
	Compare              *CompareOp `protobuf:"bytes,1,opt,name=compare,proto3" json:"compare,omitempty"`
	Once                 bool       `protobuf:"varint,2,opt,name=once,proto3" json:"once,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RerollModifier) Reset()         { *m = RerollModifier{} }
func (m *RerollModifier) String() string { return proto.CompactTextString(m) }
func (*RerollModifier) ProtoMessage()    {}
func (*RerollModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_28005a9423eec0f2, []int{5}
}
func (m *RerollModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RerollModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RerollModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RerollModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerollModifier.Merge(m, src)
}
func (m *RerollModifier) XXX_Size() int {
	return m.Size()
}
func (m *RerollModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_RerollModifier.DiscardUnknown(m)
}

var xxx_messageInfo_RerollModifier proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dice.CompareOp_CompareType", CompareOp_CompareType_name, CompareOp_CompareType_value)
	proto.RegisterEnum("dice.Modifier_ModifierType", Modifier_ModifierType_name, Modifier_ModifierType_value)
	proto.RegisterEnum("dice.DropKeepModifier_DropKeepMethod", DropKeepModifier_DropKeepMethod_name, DropKeepModifier_DropKeepMethod_value)
	proto.RegisterType((*CompareOp)(nil), "dice.CompareOp")
	proto.RegisterType((*Modifier)(nil), "dice.Modifier")
	proto.RegisterType((*DropKeepModifier)(nil), "dice.DropKeepModifier")
	proto.RegisterType((*CriticalSuccessModifier)(nil), "dice.CriticalSuccessModifier")
	proto.RegisterType((*CriticalFailureModifier)(nil), "dice.CriticalFailureModifier")
	proto.RegisterType((*RerollModifier)(nil), "dice.RerollModifier")
}

func init() { proto.RegisterFile("modifier.proto", fileDescriptor_28005a9423eec0f2) }

var fileDescriptor_28005a9423eec0f2 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xc5, 0xd8, 0x38, 0x30, 0x24, 0x64, 0xbb, 0x42, 0x29, 0x6a, 0x55, 0x9a, 0x5a, 0xaa, 0x94,
	0x1e, 0x0a, 0x12, 0x55, 0x8f, 0x3d, 0x24, 0x60, 0x82, 0x1b, 0x37, 0x84, 0x35, 0xa8, 0x47, 0x0b,
	0xec, 0x35, 0x59, 0x15, 0x58, 0x6b, 0x31, 0x07, 0x7e, 0xa3, 0x3f, 0xd0, 0xdf, 0xc9, 0x31, 0x9f,
	0xd0, 0xf0, 0x25, 0x95, 0xd7, 0x76, 0x0b, 0x88, 0x1e, 0x72, 0x9b, 0x79, 0xef, 0xcd, 0x83, 0x19,
	0x3f, 0x1b, 0x2a, 0x73, 0xee, 0xb3, 0x80, 0x51, 0xd1, 0x08, 0x05, 0x8f, 0x38, 0xd6, 0x7c, 0xe6,
	0xd1, 0x57, 0x1f, 0xa7, 0x2c, 0xba, 0x5f, 0x4d, 0x1a, 0x1e, 0x9f, 0x37, 0xa7, 0x7c, 0xca, 0x9b,
	0x92, 0x9c, 0xac, 0x02, 0xd9, 0xc9, 0x46, 0x56, 0xc9, 0x90, 0xf1, 0x4b, 0x81, 0x52, 0x9b, 0xcf,
	0xc3, 0xb1, 0xa0, 0xfd, 0x10, 0x37, 0x41, 0x8b, 0xd6, 0x21, 0xad, 0x29, 0xe7, 0xca, 0x45, 0xa5,
	0xf5, 0xba, 0x11, 0x3b, 0x36, 0xfe, 0xd2, 0x59, 0x35, 0x5c, 0x87, 0x94, 0x48, 0x21, 0x3e, 0x03,
	0x3d, 0x1a, 0x8b, 0x29, 0x8d, 0x6a, 0xf9, 0x73, 0xe5, 0x02, 0x93, 0xb4, 0x33, 0x2c, 0x28, 0x6f,
	0x89, 0xf1, 0x09, 0x94, 0x46, 0xb7, 0x1d, 0xb3, 0x6b, 0xdd, 0x9a, 0x1d, 0x94, 0xc3, 0x47, 0xa0,
	0x9a, 0x03, 0x1b, 0x29, 0x71, 0x61, 0x3b, 0x0e, 0xca, 0xc7, 0xc5, 0xf5, 0x90, 0x20, 0x55, 0x22,
	0xe6, 0x00, 0x69, 0x12, 0x31, 0x07, 0xa8, 0x60, 0xfc, 0x54, 0xa1, 0xf8, 0x2d, 0xdd, 0x14, 0x7f,
	0x86, 0x92, 0x2f, 0x78, 0xe8, 0xfe, 0xa0, 0x34, 0x94, 0x3f, 0x59, 0x6e, 0x9d, 0x25, 0xff, 0xb2,
	0x23, 0x78, 0x78, 0x43, 0x69, 0x98, 0x49, 0x7b, 0x39, 0x52, 0xf4, 0x53, 0x0c, 0x7f, 0x05, 0xe4,
	0x09, 0x16, 0x31, 0x6f, 0x3c, 0x73, 0x97, 0x2b, 0xcf, 0xa3, 0xcb, 0x65, 0x4d, 0x95, 0xd3, 0x6f,
	0xd2, 0x1d, 0x53, 0xd6, 0x49, 0xc8, 0x2d, 0x93, 0x53, 0x6f, 0x97, 0xda, 0xf1, 0x0a, 0xc6, 0x6c,
	0xb6, 0x12, 0xb4, 0xa6, 0x1d, 0xf2, 0xea, 0x26, 0xe4, 0x21, 0xaf, 0x94, 0xc2, 0x0d, 0xd0, 0x05,
	0x15, 0x7c, 0x36, 0xab, 0x15, 0xa4, 0x43, 0x35, 0x71, 0x20, 0x12, 0xdb, 0x1a, 0x4c, 0x55, 0x86,
	0x0f, 0xc7, 0x19, 0x7a, 0xe8, 0xae, 0x00, 0x3a, 0x31, 0x49, 0xdf, 0x8e, 0x4f, 0x7b, 0x02, 0xa5,
	0x0e, 0xe9, 0xdf, 0xb9, 0x37, 0xa6, 0x79, 0x87, 0xf2, 0xb8, 0x0a, 0xa8, 0x4d, 0xac, 0xa1, 0xd5,
	0xbe, 0xb4, 0xdd, 0xee, 0xa5, 0x65, 0x8f, 0x88, 0x89, 0xd4, 0x1d, 0xd4, 0x19, 0xb5, 0xdb, 0xa6,
	0xe3, 0x20, 0xed, 0xea, 0x1d, 0xbc, 0xcd, 0xa2, 0xe5, 0xfa, 0x2c, 0x08, 0xa8, 0xa0, 0x8b, 0x88,
	0x8d, 0x23, 0xb6, 0x98, 0xba, 0x01, 0xa3, 0x33, 0x7f, 0x69, 0x6c, 0x14, 0x40, 0xfb, 0x17, 0xc7,
	0x5f, 0x40, 0x9f, 0xd3, 0xe8, 0x9e, 0xfb, 0x69, 0x7e, 0xde, 0x1f, 0x7e, 0x32, 0xff, 0x00, 0x29,
	0x26, 0xe9, 0x10, 0xae, 0x42, 0xc1, 0xe3, 0xab, 0x45, 0x12, 0xa5, 0x17, 0x24, 0x69, 0x8c, 0x35,
	0x54, 0x76, 0xf5, 0xfb, 0x4b, 0x17, 0x41, 0x8b, 0x17, 0x45, 0x0a, 0x3e, 0x85, 0xb2, 0x5c, 0xd9,
	0xee, 0x7f, 0x37, 0x9d, 0x21, 0xca, 0x63, 0x04, 0xc7, 0x12, 0xe8, 0x59, 0xd7, 0xbd, 0x18, 0x51,
	0x63, 0xb1, 0x3c, 0x88, 0x16, 0x8b, 0xe3, 0x2a, 0x13, 0x17, 0x62, 0xb1, 0x04, 0x32, 0xb1, 0x6e,
	0x74, 0xe0, 0xe5, 0x7f, 0x72, 0x81, 0x3f, 0xc0, 0x91, 0x97, 0xe4, 0x5b, 0xee, 0x5a, 0x6e, 0x9d,
	0xee, 0xbd, 0x2b, 0x24, 0xe3, 0xb7, 0x5d, 0xf6, 0x12, 0xf1, 0x1c, 0x97, 0x3e, 0x54, 0x76, 0x53,
	0xf1, 0x8c, 0x61, 0x8c, 0x41, 0xe3, 0x0b, 0x8f, 0xca, 0xc3, 0x16, 0x89, 0xac, 0xaf, 0xaa, 0x0f,
	0x4f, 0xf5, 0xdc, 0xe3, 0x53, 0x3d, 0xf7, 0xb0, 0xa9, 0x2b, 0x8f, 0x9b, 0xba, 0xf2, 0x7b, 0x53,
	0x57, 0x26, 0xba, 0xfc, 0x2a, 0x7c, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x38, 0xe7, 0xeb, 0x40,
	0x5c, 0x04, 0x00, 0x00,
}

func (m *CompareOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Target != 0 {
		i = encodeVarintModifier(dAtA, i, uint64((uint64(m.Target)<<1)^uint64((m.Target>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintModifier(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Modifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Modifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Modifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModifierDifferentiatingFields != nil {
		{
			size := m.ModifierDifferentiatingFields.Size()
			i -= size
			if _, err := m.ModifierDifferentiatingFields.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Modifier_DropKeep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Modifier_DropKeep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DropKeep != nil {
		{
			size, err := m.DropKeep.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Modifier_CriticalSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Modifier_CriticalSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CriticalSuccess != nil {
		{
			size, err := m.CriticalSuccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Modifier_CriticalFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Modifier_CriticalFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CriticalFailure != nil {
		{
			size, err := m.CriticalFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Modifier_Reroll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Modifier_Reroll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reroll != nil {
		{
			size, err := m.Reroll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DropKeepModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropKeepModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropKeepModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintModifier(dAtA, i, uint64((uint32(m.Count)<<1)^uint32((m.Count>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Method != 0 {
		i = encodeVarintModifier(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CriticalSuccessModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CriticalSuccessModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CriticalSuccessModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Compare != nil {
		{
			size, err := m.Compare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CriticalFailureModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CriticalFailureModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CriticalFailureModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Compare != nil {
		{
			size, err := m.Compare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RerollModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RerollModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RerollModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Once {
		i--
		if m.Once {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Compare != nil {
		{
			size, err := m.Compare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModifier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModifier(dAtA []byte, offset int, v uint64) int {
	offset -= sovModifier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompareOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModifier(uint64(m.Type))
	}
	if m.Target != 0 {
		n += 1 + sozModifier(uint64(m.Target))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Modifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModifierDifferentiatingFields != nil {
		n += m.ModifierDifferentiatingFields.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Modifier_DropKeep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DropKeep != nil {
		l = m.DropKeep.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	return n
}
func (m *Modifier_CriticalSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CriticalSuccess != nil {
		l = m.CriticalSuccess.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	return n
}
func (m *Modifier_CriticalFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CriticalFailure != nil {
		l = m.CriticalFailure.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	return n
}
func (m *Modifier_Reroll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reroll != nil {
		l = m.Reroll.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	return n
}
func (m *DropKeepModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovModifier(uint64(m.Method))
	}
	if m.Count != 0 {
		n += 1 + sozModifier(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CriticalSuccessModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Compare != nil {
		l = m.Compare.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CriticalFailureModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Compare != nil {
		l = m.Compare.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RerollModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Compare != nil {
		l = m.Compare.Size()
		n += 1 + l + sovModifier(uint64(l))
	}
	if m.Once {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModifier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModifier(x uint64) (n int) {
	return sovModifier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompareOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CompareOp_CompareType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Target = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Modifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Modifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Modifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropKeep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DropKeepModifier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModifierDifferentiatingFields = &Modifier_DropKeep{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CriticalSuccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CriticalSuccessModifier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModifierDifferentiatingFields = &Modifier_CriticalSuccess{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CriticalFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CriticalFailureModifier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModifierDifferentiatingFields = &Modifier_CriticalFailure{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reroll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RerollModifier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModifierDifferentiatingFields = &Modifier_Reroll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropKeepModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropKeepModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropKeepModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= DropKeepModifier_DropKeepMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Count = v
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CriticalSuccessModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CriticalSuccessModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CriticalSuccessModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compare == nil {
				m.Compare = &CompareOp{}
			}
			if err := m.Compare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CriticalFailureModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CriticalFailureModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CriticalFailureModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compare == nil {
				m.Compare = &CompareOp{}
			}
			if err := m.Compare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RerollModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RerollModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RerollModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModifier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModifier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compare == nil {
				m.Compare = &CompareOp{}
			}
			if err := m.Compare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Once", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Once = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModifier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModifier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModifier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModifier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModifier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModifier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModifier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModifier = fmt.Errorf("proto: unexpected end of group")
)
