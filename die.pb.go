// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: die.proto

package dice

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DieType is the enum of types that a die or dice can be.
type DieType int32

const (
	STANDARD_POLYHEDRON DieType = 0
	FUDGE               DieType = 1
	INDEX               DieType = 2
)

var DieType_name = map[int32]string{
	0: "STANDARD_POLYHEDRON",
	1: "FUDGE",
	2: "INDEX",
}

var DieType_value = map[string]int32{
	"STANDARD_POLYHEDRON": 0,
	"FUDGE":               1,
	"INDEX":               2,
}

func (x DieType) String() string {
	return proto.EnumName(DieType_name, int32(x))
}

func (DieType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63024141677a1298, []int{0}
}

type Die struct {
	Type                 string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Size_                int32         `protobuf:"zigzag32,2,opt,name=size,proto3" json:"size,omitempty"`
	Result               *RollResult   `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Rolls                []*RollResult `protobuf:"bytes,5,rep,name=rolls,proto3" json:"rolls,omitempty"`
	Modifiers            []*Modifier   `protobuf:"bytes,6,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Die) Reset()         { *m = Die{} }
func (m *Die) String() string { return proto.CompactTextString(m) }
func (*Die) ProtoMessage()    {}
func (*Die) Descriptor() ([]byte, []int) {
	return fileDescriptor_63024141677a1298, []int{0}
}
func (m *Die) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Die) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Die.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Die) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Die.Merge(m, src)
}
func (m *Die) XXX_Size() int {
	return m.Size()
}
func (m *Die) XXX_DiscardUnknown() {
	xxx_messageInfo_Die.DiscardUnknown(m)
}

var xxx_messageInfo_Die proto.InternalMessageInfo

type Properties struct {
	Type                 string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Size_                int32       `protobuf:"zigzag32,2,opt,name=size,proto3" json:"size,omitempty"`
	Result               *RollResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Count                int32       `protobuf:"zigzag32,4,opt,name=count,proto3" json:"count,omitempty"`
	DieModifiers         []*Modifier `protobuf:"bytes,5,rep,name=die_modifiers,json=dieModifiers,proto3" json:"die_modifiers,omitempty"`
	GroupModifiers       []*Modifier `protobuf:"bytes,6,rep,name=group_modifiers,json=groupModifiers,proto3" json:"group_modifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Properties) Reset()         { *m = Properties{} }
func (m *Properties) String() string { return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()    {}
func (*Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_63024141677a1298, []int{1}
}
func (m *Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Properties.Merge(m, src)
}
func (m *Properties) XXX_Size() int {
	return m.Size()
}
func (m *Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Properties proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dice.DieType", DieType_name, DieType_value)
	proto.RegisterType((*Die)(nil), "dice.Die")
	proto.RegisterType((*Properties)(nil), "dice.Properties")
}

func init() { proto.RegisterFile("die.proto", fileDescriptor_63024141677a1298) }

var fileDescriptor_63024141677a1298 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x18, 0xc5, 0x1d, 0x35, 0x5e, 0xf2, 0x5d, 0x6b, 0xe3, 0x54, 0x68, 0x70, 0x11, 0x82, 0x8b, 0x12,
	0x4a, 0x1b, 0xa1, 0x2e, 0xda, 0xad, 0x25, 0xf6, 0x0f, 0xb4, 0x2a, 0x53, 0x0b, 0xed, 0x4a, 0xd0,
	0x8c, 0xe9, 0x40, 0xec, 0x84, 0x49, 0xb2, 0x68, 0xdf, 0xa9, 0xef, 0xe1, 0xd2, 0x47, 0xa8, 0x79,
	0x92, 0x92, 0x19, 0xad, 0x1b, 0x41, 0xe8, 0xee, 0x9c, 0xf3, 0xfd, 0x42, 0xce, 0x61, 0x40, 0xf7,
	0x19, 0x75, 0x23, 0xc1, 0x13, 0x8e, 0xcb, 0x3e, 0x9b, 0xd2, 0x66, 0x6d, 0xce, 0x7d, 0x36, 0x63,
	0x54, 0xa8, 0xb4, 0x59, 0x15, 0x34, 0x4e, 0xc3, 0x64, 0xed, 0xce, 0x03, 0x96, 0xbc, 0xa5, 0x13,
	0x77, 0xca, 0xe7, 0xed, 0x80, 0x07, 0xbc, 0x2d, 0xe3, 0x49, 0x3a, 0x93, 0x4e, 0x1a, 0xa9, 0x14,
	0xde, 0xfa, 0x42, 0x50, 0xf2, 0x18, 0xc5, 0x18, 0xca, 0xc9, 0x47, 0x44, 0x4d, 0x64, 0x23, 0x47,
	0x27, 0x52, 0xe7, 0x59, 0xcc, 0x3e, 0xa9, 0x59, 0xb4, 0x91, 0x53, 0x27, 0x52, 0x63, 0x07, 0x2a,
	0xea, 0x77, 0x66, 0xd9, 0x46, 0xce, 0xff, 0x0b, 0xc3, 0xcd, 0x3b, 0xb9, 0x84, 0x87, 0x21, 0x91,
	0x39, 0x59, 0xdf, 0xf1, 0x09, 0x68, 0x82, 0x87, 0x61, 0x6c, 0x6a, 0x76, 0x69, 0x27, 0xa8, 0xce,
	0xf8, 0x0c, 0xf4, 0xcd, 0xa0, 0xd8, 0xac, 0x48, 0xb6, 0xa6, 0xd8, 0xc7, 0x75, 0x4c, 0xb6, 0x40,
	0x2b, 0x43, 0x00, 0x43, 0xc1, 0x23, 0x2a, 0x12, 0x46, 0xe3, 0x3f, 0xd4, 0x2e, 0xed, 0xa9, 0xdd,
	0x00, 0x6d, 0xca, 0xd3, 0x77, 0xb5, 0xaf, 0x4e, 0x94, 0xc1, 0x1d, 0x38, 0xf0, 0x19, 0x1d, 0x6f,
	0x8b, 0x6a, 0x3b, 0x8b, 0x56, 0x7d, 0x46, 0x37, 0x26, 0xc6, 0x97, 0x70, 0x18, 0x08, 0x9e, 0x46,
	0xe3, 0x7d, 0xfb, 0x6a, 0x12, 0xfb, 0xfd, 0xf0, 0xf4, 0x0a, 0xfe, 0x79, 0x8c, 0x8e, 0xf2, 0x31,
	0xc7, 0x70, 0xf4, 0x34, 0xea, 0xf6, 0xbd, 0x2e, 0xf1, 0xc6, 0xc3, 0xc1, 0xc3, 0xeb, 0x5d, 0xcf,
	0x23, 0x83, 0xbe, 0x51, 0xc0, 0x3a, 0x68, 0x37, 0xcf, 0xde, 0x6d, 0xcf, 0x40, 0xb9, 0xbc, 0xef,
	0x7b, 0xbd, 0x17, 0xa3, 0x78, 0xdd, 0x58, 0xac, 0xac, 0xc2, 0x72, 0x65, 0x15, 0x16, 0x99, 0x85,
	0x96, 0x99, 0x85, 0xbe, 0x33, 0x0b, 0x4d, 0x2a, 0xf2, 0xad, 0x3b, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0x29, 0xf8, 0xd4, 0x4b, 0x02, 0x00, 0x00,
}

func (m *Die) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Die) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Die) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modifiers) > 0 {
		for iNdEx := len(m.Modifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Rolls) > 0 {
		for iNdEx := len(m.Rolls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rolls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintDie(dAtA, i, uint64((uint32(m.Size_)<<1)^uint32((m.Size_>>31))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDie(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupModifiers) > 0 {
		for iNdEx := len(m.GroupModifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupModifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DieModifiers) > 0 {
		for iNdEx := len(m.DieModifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DieModifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Count != 0 {
		i = encodeVarintDie(dAtA, i, uint64((uint32(m.Count)<<1)^uint32((m.Count>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintDie(dAtA, i, uint64((uint32(m.Size_)<<1)^uint32((m.Size_>>31))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDie(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDie(dAtA []byte, offset int, v uint64) int {
	offset -= sovDie(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Die) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDie(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sozDie(uint64(m.Size_))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDie(uint64(l))
	}
	if len(m.Rolls) > 0 {
		for _, e := range m.Rolls {
			l = e.Size()
			n += 1 + l + sovDie(uint64(l))
		}
	}
	if len(m.Modifiers) > 0 {
		for _, e := range m.Modifiers {
			l = e.Size()
			n += 1 + l + sovDie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDie(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sozDie(uint64(m.Size_))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDie(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sozDie(uint64(m.Count))
	}
	if len(m.DieModifiers) > 0 {
		for _, e := range m.DieModifiers {
			l = e.Size()
			n += 1 + l + sovDie(uint64(l))
		}
	}
	if len(m.GroupModifiers) > 0 {
		for _, e := range m.GroupModifiers {
			l = e.Size()
			n += 1 + l + sovDie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDie(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDie(x uint64) (n int) {
	return sovDie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Die) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Die: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Die: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Size_ = v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &RollResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rolls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rolls = append(m.Rolls, &RollResult{})
			if err := m.Rolls[len(m.Rolls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modifiers = append(m.Modifiers, &Modifier{})
			if err := m.Modifiers[len(m.Modifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Size_ = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &RollResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Count = v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DieModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DieModifiers = append(m.DieModifiers, &Modifier{})
			if err := m.DieModifiers[len(m.DieModifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupModifiers = append(m.GroupModifiers, &Modifier{})
			if err := m.GroupModifiers[len(m.GroupModifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDie
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDie
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDie
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDie        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDie          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDie = fmt.Errorf("proto: unexpected end of group")
)
